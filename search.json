[{"path":"/articles/sdcSpatial.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introducing sdcSpatial","text":"sdcSpatial contains two simulated datasets realistic locations: dwellings enterprises. Lets look dataset enterprises. enterprises SpatialPointsDataFrame object, sdc_raster works equally well sf data.frame objects point data (locations). enterprises contains two simulated variables: production (numeric) fined (logical), interested spatial distribution.","code":"data(\"enterprises\") head(enterprises) #> Loading required package: sp #>       coordinates production fined #> 1 (80782, 448985)   408.8129 FALSE #> 2 (81007, 448947)   587.0074 FALSE #> 3 (81042, 448875)   566.2759 FALSE #> 4 (81003, 448940)   581.8662 FALSE #> 5 (80886, 448804)   854.1555 FALSE #> 6 (80986, 448934)   624.2627 FALSE summary(enterprises) #> Object of class SpatialPointsDataFrame #> Coordinates: #>      min    max #> x  68507  82498 #> y 440024 448999 #> Is projected: TRUE  #> proj4string : #> [+init=epsg:28992 +proj=sterea +lat_0=52.15616055555555 #> +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 #> +ellps=bessel #> +towgs84=565.2369,50.0087,465.658,-0.406857,0.350733,-1.87035,4.0812 #> +units=m +no_defs] #> Number of points: 8348 #> Data attributes: #>    production          fined         #>  Min.   :    59.46   Mode :logical   #>  1st Qu.:  1019.98   FALSE:7931      #>  Median :  1954.32   TRUE :417       #>  Mean   :  3249.59                   #>  3rd Qu.:  3901.44                   #>  Max.   :114467.56"},{"path":"/articles/sdcSpatial.html","id":"view-the-data","dir":"Articles","previous_headings":"","what":"View the data","title":"Introducing sdcSpatial","text":"Let’s first plot locations enterprises: many locations lot -plotting occlusion taking place: better visualization method reveal spatial patterns case create raster density plot. Since interested spatial distribution production like rasterize data, can done raster::rasterize ggplot2::geom_tile didactic sake use sdc_raster create raster map 500m grid. plotted mean production, stats kept production$value object:  important question : Can publish map contain sensitive values?","code":"sp::plot(enterprises) production <- sdc_raster(enterprises, \"production\", r = 500) plot(production, value=\"mean\", sensitive=FALSE, main=\"mean production\") raster::plot(production$value[[1:3]])"},{"path":"/articles/sdcSpatial.html","id":"sensitive-locations","dir":"Articles","previous_headings":"","what":"Sensitive locations","title":"Introducing sdcSpatial","text":"Let us see many values sensitive: Printing production object shows demand raster cell least 10 observations (min_count) value dominated one enterprise (max_risk), 64% data map sensitive! 500m 500m block threshold 10 enterprises high side, let us change 5: score dropped, cells talking ?  sensitive_cells raster can used inspection.","code":"print(production) #> numeric sdc_raster object:  #>    resolution: 500 500 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.6432039 production$min_count <- 5 production$max_risk <- 0.9 # or equally  production <- sdc_raster(enterprises, \"production\"                         , r = 500, min_count = 5, max_risk = 0.9) sensitivity_score(production) #> [1] 0.3567961 plot(production) sensitive_cells <- is_sensitive(production)"},{"path":"/articles/sdcSpatial.html","id":"reducing-sensitivity","dir":"Articles","previous_headings":"","what":"Reducing sensitivity","title":"Introducing sdcSpatial","text":"Let us try reduce sensitivity map using smoothing method: case smoothing reduced number sensitive locations drastically! Let us remove remaining sensitive cells can improve upon “blocky” map using raster::disaggregate. can plot following:  protect_quadtree also protecting method, demonstrate variable fined. First create fine grained (pun intended) raster variable fined. rather sensitive, let us look locations:  quadtree method aggregates sensitive cells 3 neighbors recursively: result follows: sensitivity score 0. method advantage locally selecting necessary resolution suppress sensitive values, protect_smooth method uses fixed bandwidth. protection result blocky comparison smoothing method, safer look sensitive cells high fined areas.","code":"production_smoothed <- protect_smooth(production, bw = 500) plot(production_smoothed) production_safe <- remove_sensitive(production_smoothed) sensitivity_score(production_safe) # check, double check #> [1] 0 mean_production <- mean(production_safe) mean_production <- raster::disaggregate(mean_production, 10, \"bilinear\") # generated with R >= 3.6 # col <- hcl.colors(10, \"YlOrRd\", rev = TRUE) col <- c(\"#FFFFC8\", \"#FEF1B2\", \"#FADC8A\", \"#F7C252\", \"#F5A400\", \"#F18000\",           \"#EB5500\", \"#D12D00\", \"#A90D00\", \"#7D0025\") raster::plot(mean_production, col=col) # library(leaflet) # leaflet() %>%  #   leaflet::addTiles() %>%  #   leaflet::addRasterImage(mean_production, colors = col, opacity = 0.5) fined <- sdc_raster(enterprises, \"fined\", min_count = 5, r = 200, max_risk = 0.8) print(fined) #> logical sdc_raster object:  #>    resolution: 200 200 ,  max_risk: 0.8 , min_count: 5  #>    mean sensitivity score [0,1]:  0.7802503 # col <- hcl.colors(10, rev=TRUE) # generated with R >= 3.6 col <- c(\"#FDE333\", \"#BBDD38\", \"#6CD05E\", \"#00BE7D\", \"#00A890\"         , \"#008E98\",  \"#007094\", \"#185086\", \"#422C70\", \"#4B0055\") plot(fined, \"mean\", col=col) fined_qt <- protect_quadtree(fined) plot(fined_qt, col=col) fined_smooth <- protect_smooth(fined, bw = 500, keep_resolution=FALSE) plot(fined_smooth, col = col) sensitivity_score(fined_smooth) #> [1] 0"},{"path":"/articles/sdcSpatial.html","id":"thanks-to-raster","dir":"Articles","previous_headings":"","what":"Thanks to raster","title":"Introducing sdcSpatial","text":"sdcSpatial builds heavily upon excellent raster package: creates raster maps uses machinery raster calculate sensitivity apply protection methods raster maps.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin de Jonge. Author, maintainer. Peter-Paul de Wolf. Author. Douwe Hut. Contributor. Sapphire Han. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Jonge E, de Wolf P (2022). sdcSpatial: Statistical Disclosure Control Spatial Data. R package version 0.5.2, https://github.com/edwindj/sdcSpatial.","code":"@Manual{,   title = {sdcSpatial: Statistical Disclosure Control for Spatial Data},   author = {Edwin {de Jonge} and Peter-Paul {de Wolf}},   year = {2022},   note = {R package version 0.5.2},   url = {https://github.com/edwindj/sdcSpatial}, }"},{"path":"/index.html","id":"sdcspatial","dir":"","previous_headings":"","what":"Statistical Disclosure Control for Spatial Data","title":"Statistical Disclosure Control for Spatial Data","text":"Publishing raster density map can reveal sensitive values. sdcSpatial opensource R package creating spatial density (raster) maps point data protecting privacy individual observations. sdcSpatial offers sdc_raster class allows : find locations considered sensitive / unsafe publishing: plot_sensitive, is_sensitive, sensitivity_score. apply protection methods reduce sensitiviy enhance spatial patterns: protect_smooth, protect_quadtree. remove sensitive locations: remove_sensitive. extract relative well absolute density rasters can used visualisation packages, tmap leaflet: x$value$mean, x$value$sum, mean, sum.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Statistical Disclosure Control for Spatial Data","text":"install current development version sdcSpatial devtools","code":"install.packages(\"sdcSpatial\") remotes::install_github(\"edwindj/sdcSpatial\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Statistical Disclosure Control for Spatial Data","text":"","code":"library(sdcSpatial) library(raster) #> Loading required package: sp  data(enterprises)  # create a sdc_raster from point data with raster with # a resolution of 200m production <- sdc_raster(enterprises, variable = \"production\"                         , r = 200, min_count = 3)  print(production) #> numeric sdc_raster object:  #>    resolution: 200 200 ,  max_risk: 0.95 , min_count: 3  #>    mean sensitivity score [0,1]:  0.6328234  # plot the raster zlim <- c(0, 3e4) # show which raster cells are sensitive plot(production, zlim=zlim) # but we can also retrieve directly the raster sensitive <- is_sensitive(production, min_count = 3) plot(sensitive, col = c('white', 'red')) # what is the sensitivy fraction? sensitivity_score(production) #> [1] 0.6328234 # or equally cellStats(sensitive, mean) #> [1] 0.6328234  # let's smooth to reduce the sensitivity smoothed <- protect_smooth(production, bw = 400) plot(smoothed) # let's smooth to reduce the sensitivity, with higher resolution smoothed <- protect_smooth(production, bw = 400, smooth_fact=4, keep_resolution=FALSE) plot(smoothed) # what is the sensitivy fraction? sensitivity_score(smoothed) #> [1] 0.007902973  # let's remove the sensitive data. smoothed_safe <- remove_sensitive(smoothed, min_count = 3) plot(smoothed_safe) # let's communicate! production_mean <- mean(smoothed_safe) production_total <- sum(smoothed_safe)  # and create a contour plot raster::filledContour(production_mean, nlevels = 6, main = \"Mean production\") # generated with R 3.6 >= #col <- hcl.colors(11, rev=TRUE) col <- c(\"#FDE333\", \"#C2DE34\", \"#7ED357\", \"#00C475\", \"#00B28A\", \"#009B95\"         ,  \"#008298\", \"#006791\", \"#274983\", \"#44286E\", \"#4B0055\"         ) raster::filledContour(production_total, nlevels = 11              , col = col              , main=\"Total production\")"},{"path":"/reference/create_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster at a certain resolution — create_raster","title":"Create a raster at a certain resolution — create_raster","text":"Utility function generate raster certain resolution (rounded coordinates).","code":""},{"path":"/reference/create_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster at a certain resolution — create_raster","text":"","code":"create_raster(x, res = 200, ...)"},{"path":"/reference/create_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster at a certain resolution — create_raster","text":"x geographical object (supports extent). res desired resolution (default 200). ... passed raster function.","code":""},{"path":"/reference/create_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster at a certain resolution — create_raster","text":"raster::raster object","code":""},{"path":"/reference/disclosure_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate disclosure risk for raster cells — disclosure_risk","title":"Calculate disclosure risk for raster cells — disclosure_risk","text":"disclosure risk function used is_sensitive() determine risk raster cell. returns score 0 1 cells finite value (otherwise NA).","code":""},{"path":"/reference/disclosure_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate disclosure risk for raster cells — disclosure_risk","text":"","code":"disclosure_risk(x, risk_type = x$risk_type)"},{"path":"/reference/disclosure_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate disclosure risk for raster cells — disclosure_risk","text":"x sdc_raster object. risk_type character: \"external\", \"internal\", \"discrete\".","code":""},{"path":"/reference/disclosure_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate disclosure risk for raster cells — disclosure_risk","text":"raster::raster object disclosure risk.","code":""},{"path":"/reference/disclosure_risk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate disclosure risk for raster cells — disclosure_risk","text":"Different risk functions include: external (numeric variable), calculates much largest value comprises total sum within cell internal (numeric variable), calculates much largest value comprises sum without second largest value discrete (logical variable), calculates fraction TRUE vs FALSE","code":""},{"path":[]},{"path":"/reference/dwellings.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated dwellings data set — dwellings","title":"Simulated dwellings data set — dwellings","text":"data generated residence/household locations Dutch open data BAG register. locations realistic, associated data simulated.","code":""},{"path":"/reference/dwellings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated dwellings data set — dwellings","text":"","code":"dwellings"},{"path":"/reference/dwellings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated dwellings data set — dwellings","text":"data.frame 90603 rows 4 columns. x integer, x coordinate dwelling (crs 28992) y integer, y coordinate dwelling (crs 28992) consumption numeric, simulated continuous value unemployed logical, simulated discrete value","code":""},{"path":"/reference/dwellings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated dwellings data set — dwellings","text":"Basisregistratie Adressen en Gebouwen https://www.kadaster.nl/zakelijk/registraties/basisregistraties/bag/bag-producten","code":""},{"path":"/reference/dwellings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated dwellings data set — dwellings","text":"","code":"# \\donttest{ # dwellings is a data.frame, the best way is to first turn it # into a sf or sp object.  # create an sf object from our data if (requireNamespace(\"sf\")){   dwellings_sf <- sf::st_as_sf(dwellings, coords=c(\"x\", \"y\"), crs=28992)    unemployed <- sdc_raster( dwellings_sf                           , \"unemployed\"                           , r=200                           , max_risk = 0.9                           )    plot(unemployed)   sensitivity_score(unemployed)    unemployed_smoothed <- protect_smooth(unemployed, bw = 0.4e3)   plot(unemployed_smoothed, main=\"Employment rate\")   plot(unemployed_smoothed, \"sum\", main = \"Employment\") } else {   message(\"Package 'sf' was not installed.\") } #> Loading required namespace: sf     dwellings_sp <- dwellings # or change a data.frame into a sp object sp::coordinates(dwellings_sp) <- ~ x + y tryCatch(   # not working on some OS versions.   sp::proj4string(dwellings_sp) <- \"+init=epsg:28992\" ) consumption <- sdc_raster(dwellings_sp, dwellings_sp$consumption, r = 500) consumption #> numeric sdc_raster object:  #>    resolution: 500 500 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.4207188  plot(consumption)   # but we can also create a raster directly from a data.frame unemployed <- sdc_raster( dwellings[c(\"x\",\"y\")], dwellings$unemployed) # }"},{"path":"/reference/enterprises.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data set with enterprise locations. — enterprises","title":"Simulated data set with enterprise locations. — enterprises","text":"enterprises generated dutch open data BAG register. locations realistic, associated data simulated.","code":""},{"path":"/reference/enterprises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data set with enterprise locations. — enterprises","text":"","code":"enterprises"},{"path":"/reference/enterprises.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data set with enterprise locations. — enterprises","text":"object class SpatialPointsDataFrame 8348 rows 2 columns. production numeric simulated production (lognormal). fined logical simulated variable enterprise fined .","code":""},{"path":"/reference/enterprises.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated data set with enterprise locations. — enterprises","text":"Basisregistratie Adressen en Gebouwen: https://www.kadaster.nl/zakelijk/registraties/basisregistraties/bag/bag-producten","code":""},{"path":"/reference/enterprises.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated data set with enterprise locations. — enterprises","text":"","code":"# \\donttest{ library(sdcSpatial) library(raster) #> Loading required package: sp  data(\"enterprises\")  production <- sdc_raster(enterprises, \"production\", min_count = 10) print(production) #> numeric sdc_raster object:  #>    resolution: 200 200 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.8581363  # show the average production per cell plot(production, \"mean\")  production$min_count <- 2 # adjust norm for sdc plot(production)   production_safe <- remove_sensitive(production) plot(production_safe)  # }"},{"path":"/reference/is_sensitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Return raster with sensitive locations. — is_sensitive","title":"Return raster with sensitive locations. — is_sensitive","text":"Create binary raster sensitive locations.","code":""},{"path":"/reference/is_sensitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return raster with sensitive locations. — is_sensitive","text":"","code":"is_sensitive(   x,   max_risk = x$max_risk,   min_count = x$min_count,   risk_type = x$risk_type )"},{"path":"/reference/is_sensitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return raster with sensitive locations. — is_sensitive","text":"x sdc_raster object. max_risk risk value higher max_risk sensitive. min_count count lower min_count sensitive. risk_type kind measure used (see details).","code":""},{"path":"/reference/is_sensitive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return raster with sensitive locations. — is_sensitive","text":"default risk settings taken x, can overriden. Different risk functions can used: external (numeric variable), calculates much largest value comprises total sum internal (numeric variable), calculates much largest value comprises sum without second largest value discrete (logical variable), calculates fraction sensitive values.","code":""},{"path":[]},{"path":"/reference/is_sensitive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return raster with sensitive locations. — is_sensitive","text":"","code":"# \\donttest{ dwellings_sp <- dwellings sp::coordinates(dwellings_sp) <- ~ x + y tryCatch(   # does not work on some OS versions   sp::proj4string(dwellings_sp) <- \"+init=epsg:28992\" ) # create a 1km grid unemployed <- sdc_raster(dwellings_sp, dwellings_sp$unemployed, r = 1e3) print(unemployed) #> logical sdc_raster object:  #>    resolution: 1000 1000 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.2767296  # retrieve the sensitive cells is_sensitive(unemployed) #> class      : RasterLayer  #> dimensions : 14, 13, 182  (nrow, ncol, ncell) #> resolution : 1000, 1000  (x, y) #> extent     : 149000, 162000, 457000, 471000  (xmin, xmax, ymin, ymax) #> crs        : +init=epsg:28992  #> source     : memory #> names      : sensitive  #> values     : 0, 1  (min, max) #>  # }"},{"path":"/reference/is_sensitive_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","title":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","text":"Calculate sensitivity  sdc_raster x,y locations. typical use calculate sensitivity locations x created (see example).","code":""},{"path":"/reference/is_sensitive_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","text":"","code":"is_sensitive_at(x, xy, ...)"},{"path":"/reference/is_sensitive_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","text":"x sdc_raster() xy matrix x y coordinates, SpatialPoints SpatialPointsDataFrame object ... Arguments passed is_sensitive max_risk risk value higher max_risk sensitive. min_count count lower min_count sensitive. risk_type kind measure used (see details).","code":""},{"path":"/reference/is_sensitive_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","text":"logical vector ","code":""},{"path":[]},{"path":"/reference/is_sensitive_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sensitivity from  a sdc_raster at x,y locations. — is_sensitive_at","text":"","code":"# \\donttest{ production <- sdc_raster(enterprises, \"production\")  # add the sensitive variable to original data set. enterprises$sensitive <- is_sensitive_at(production, enterprises) # }"},{"path":"/reference/mask_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask coordinates using a grid — mask_grid","title":"Mask coordinates using a grid — mask_grid","text":"Pertubates coordinates rounding coordinates grid coordinates","code":""},{"path":"/reference/mask_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask coordinates using a grid — mask_grid","text":"","code":"mask_grid(x, r, plot = FALSE)"},{"path":"/reference/mask_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask coordinates using a grid — mask_grid","text":"x coordinates r grid resolution plot TRUE points (black) pertubation (red) plotted","code":""},{"path":[]},{"path":"/reference/mask_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mask coordinates using a grid — mask_grid","text":"","code":"x <- cbind(   x = c(2.5, 3.5, 7.2, 1.5),   y = c(6.2, 3.8, 4.4, 2.1) )  # plotting is only useful from small datasets!  # grid masking x_g <- mask_grid(x, r=1, plot=TRUE)   # random pertubation set.seed(3) x_r <- mask_random(x, r=1, plot=TRUE)   if (requireNamespace(\"FNN\", quietly = TRUE)){   # weighted random pertubation   x_wr <- mask_weighted_random(x, k = 2, r = 4, plot=TRUE) }   if ( requireNamespace(\"FNN\", quietly = TRUE)   && requireNamespace(\"sf\", quietly = TRUE)    ){   # voronoi masking, plotting needs package `sf`   x_vor <- mask_voronoi(x, r = 1, plot=TRUE) }"},{"path":"/reference/mask_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask coordinates using random pertubation — mask_random","title":"Mask coordinates using random pertubation — mask_random","text":"Pertubates points uniform pertubation circle. Note r can either one distance, distance per data point.","code":""},{"path":"/reference/mask_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask coordinates using random pertubation — mask_random","text":"","code":"mask_random(x, r, plot = FALSE)"},{"path":"/reference/mask_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask coordinates using random pertubation — mask_random","text":"x coordinates, matrix data.frame (first two columns) r numeric maximum pertubation distance (vectorized) plot TRUE points plotted.","code":""},{"path":"/reference/mask_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask coordinates using random pertubation — mask_random","text":"adapted x perturbed coordinates","code":""},{"path":[]},{"path":"/reference/mask_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mask coordinates using random pertubation — mask_random","text":"","code":"x <- cbind(   x = c(2.5, 3.5, 7.2, 1.5),   y = c(6.2, 3.8, 4.4, 2.1) )  # plotting is only useful from small datasets!  # grid masking x_g <- mask_grid(x, r=1, plot=TRUE)   # random pertubation set.seed(3) x_r <- mask_random(x, r=1, plot=TRUE)   if (requireNamespace(\"FNN\", quietly = TRUE)){   # weighted random pertubation   x_wr <- mask_weighted_random(x, k = 2, r = 4, plot=TRUE) }   if ( requireNamespace(\"FNN\", quietly = TRUE)   && requireNamespace(\"sf\", quietly = TRUE)    ){   # voronoi masking, plotting needs package `sf`   x_vor <- mask_voronoi(x, r = 1, plot=TRUE) }"},{"path":"/reference/mask_voronoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask coordinates using voronoi masking — mask_voronoi","title":"Mask coordinates using voronoi masking — mask_voronoi","text":"Pertubates points using voronoi masking. point moved nearest voronoi boundary.","code":""},{"path":"/reference/mask_voronoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask coordinates using voronoi masking — mask_voronoi","text":"","code":"mask_voronoi(x, r = 0, k = 10, plot = FALSE)"},{"path":"/reference/mask_voronoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask coordinates using voronoi masking — mask_voronoi","text":"x coordinates r tolerance, nearest voronoi least r away. k number neighbors consider determining nearest neighbors plot TRUE plots voronoi tesselation, points (black), perturbated points (red), needs package sf.","code":""},{"path":"/reference/mask_voronoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask coordinates using voronoi masking — mask_voronoi","text":"adapted x perturbed coordinates","code":""},{"path":[]},{"path":"/reference/mask_voronoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mask coordinates using voronoi masking — mask_voronoi","text":"","code":"x <- cbind(   x = c(2.5, 3.5, 7.2, 1.5),   y = c(6.2, 3.8, 4.4, 2.1) )  # plotting is only useful from small datasets!  # grid masking x_g <- mask_grid(x, r=1, plot=TRUE)   # random pertubation set.seed(3) x_r <- mask_random(x, r=1, plot=TRUE)   if (requireNamespace(\"FNN\", quietly = TRUE)){   # weighted random pertubation   x_wr <- mask_weighted_random(x, k = 2, r = 4, plot=TRUE) }   if ( requireNamespace(\"FNN\", quietly = TRUE)   && requireNamespace(\"sf\", quietly = TRUE)    ){   # voronoi masking, plotting needs package `sf`   x_vor <- mask_voronoi(x, r = 1, plot=TRUE) }"},{"path":"/reference/mask_weighted_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask coordinates using weighted random pertubation — mask_weighted_random","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"method uses per point distance kth neighbor maximum pertubation distance. Parameter r can used restrict maximum distance kth neighbor.","code":""},{"path":"/reference/mask_weighted_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"","code":"mask_weighted_random(x, k = 5, r = NULL, plot = FALSE)"},{"path":"/reference/mask_weighted_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"x coordinates, matrix data.frame (first two columns) k integer number neighbors used maximum distance r numeric maximum pertubation distance (vectorized) plot TRUE points plotted.","code":""},{"path":"/reference/mask_weighted_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"adapted x perturbed coordinates","code":""},{"path":"/reference/mask_weighted_random.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"Spatial obfuscation methods privacy protection household-level data","code":""},{"path":[]},{"path":"/reference/mask_weighted_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mask coordinates using weighted random pertubation — mask_weighted_random","text":"","code":"x <- cbind(   x = c(2.5, 3.5, 7.2, 1.5),   y = c(6.2, 3.8, 4.4, 2.1) )  # plotting is only useful from small datasets!  # grid masking x_g <- mask_grid(x, r=1, plot=TRUE)   # random pertubation set.seed(3) x_r <- mask_random(x, r=1, plot=TRUE)   if (requireNamespace(\"FNN\", quietly = TRUE)){   # weighted random pertubation   x_wr <- mask_weighted_random(x, k = 2, r = 4, plot=TRUE) }   if ( requireNamespace(\"FNN\", quietly = TRUE)   && requireNamespace(\"sf\", quietly = TRUE)    ){   # voronoi masking, plotting needs package `sf`   x_vor <- mask_voronoi(x, r = 1, plot=TRUE) }"},{"path":"/reference/max2.html","id":null,"dir":"Reference","previous_headings":"","what":"returns one but highest contribution — max2","title":"returns one but highest contribution — max2","text":"returns one highest contribution","code":""},{"path":"/reference/max2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns one but highest contribution — max2","text":"","code":"max2(x, default_value = 0, na.rm = TRUE)"},{"path":"/reference/plot.sdc_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a sdc_raster object — plot.sdc_raster","title":"Plot a sdc_raster object — plot.sdc_raster","text":"Plot sdc_raster object together sensitivity.","code":""},{"path":"/reference/plot.sdc_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a sdc_raster object — plot.sdc_raster","text":"","code":"# S3 method for sdc_raster plot(   x,   value = \"mean\",   sensitive = TRUE,   ...,   main = paste(substitute(x)),   col )"},{"path":"/reference/plot.sdc_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a sdc_raster object — plot.sdc_raster","text":"x sdc_raster object plotted value character value layer used plotting, e.g. \"sum\", \"count\", \"mean\" (default). sensitive logical show sensitivity plot? ... passed raster::plot() main title plot col color palette used, passed raster::plot().","code":""},{"path":"/reference/plot.sdc_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a sdc_raster object — plot.sdc_raster","text":"sensitive set TRUE, side--side plot made value sensitivity.","code":""},{"path":[]},{"path":"/reference/plot_sensitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the sensitive cells of the sdc_raster. — plot_sensitive","title":"Plot the sensitive cells of the sdc_raster. — plot_sensitive","text":"Plots t sensitive cells sdc_raster. sensitive cells plotted red. sensitive cells determined using is_sensitive.","code":""},{"path":"/reference/plot_sensitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the sensitive cells of the sdc_raster. — plot_sensitive","text":"","code":"plot_sensitive(x, value = \"mean\", main = \"sensitive\", col, ...)"},{"path":"/reference/plot_sensitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the sensitive cells of the sdc_raster. — plot_sensitive","text":"x sdc_raster object value character value layer used values, e.g. \"sum\", \"count\", \"mean\" (default). main character title map. col color palette used, passed raster::plot(). ... passed plot.sdc_raster.","code":""},{"path":[]},{"path":"/reference/protect_neighborhood.html","id":null,"dir":"Reference","previous_headings":"","what":"protects raster by summing over the neighborhood — protect_neighborhood","title":"protects raster by summing over the neighborhood — protect_neighborhood","text":"protects raster summing neighborhood","code":""},{"path":"/reference/protect_neighborhood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"protects raster by summing over the neighborhood — protect_neighborhood","text":"","code":"protect_neighborhood(x, radius = 10 * raster::res(x$value)[1], ...)"},{"path":"/reference/protect_neighborhood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"protects raster by summing over the neighborhood — protect_neighborhood","text":"x sdc_raster() object protected radius neighborhood take ... used moment","code":""},{"path":"/reference/protect_neighborhood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"protects raster by summing over the neighborhood — protect_neighborhood","text":"sdc_raster object","code":""},{"path":"/reference/protect_quadtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect a raster with  a quadtree method. — protect_quadtree","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"protect_quadtree reduces sensitivy aggregating sensisitve cells three neighbors, recursively sensitive cells left maximum zoom levels reached.","code":""},{"path":"/reference/protect_quadtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"","code":"protect_quadtree(x, max_zoom = Inf, ...)"},{"path":"/reference/protect_quadtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"x sdc_raster object protected. max_zoom numeric, restricts number zoom steps thereby max resolution blocks. step zoom factor 2 x y max resolution = resolution * 2^max_zoom. ... Arguments passed is_sensitive max_risk risk value higher max_risk sensitive. min_count count lower min_count sensitive. risk_type kind measure used (see details).","code":""},{"path":"/reference/protect_quadtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"sdc_raster object, sensitive cells recursively aggregated sensitive max_zoom reached.","code":""},{"path":"/reference/protect_quadtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"implementation generalizes method described Suñé et al., risk function,  min_count determine sensitivity. Furthermore method article handles count data (x$value$count), mean summed values. Currently translation feature article (yet) implemented, original method take disclosure_risk account.","code":""},{"path":"/reference/protect_quadtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"Suñé, E., Rovira, C., Ibáñez, D., Farré, M. (2017). Statistical disclosure control visualising geocoded population data using structure quadtrees, NTTS 2017","code":""},{"path":[]},{"path":"/reference/protect_quadtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect a raster with  a quadtree method. — protect_quadtree","text":"","code":"# library(raster) # # fined <- sdc_raster(enterprises, enterprises$fined) # plot(fined) # fined_qt <- protect_quadtree(fined) # plot(fined_qt) # # fined <- sdc_raster(enterprises, enterprises$fined, r=50) # plot(fined) # fined_qt <- protect_quadtree(fined) # plot(fined_qt) # # # # library(sf) # gemeente_2019 <- st_read(\"https://cartomap.github.io/nl/rd/gemeente_2019.geojson\") # st_crs(gemeente_2019) <- 28992 # nbl <- st_touches(gemeente_2019) # # coords <- st_coordinates(st_centroid(gemeente_2019)) # l <- lapply(seq_along(nbl), function(i){ #   nb <- nbl[[i]] #   st_sfc(lapply(nb, function(j){ #     st_linestring(coords[c(i,j),])}) #   ) # }) # l2 <- do.call(c, l) # # edge_list <- as.data.frame(nbl) # library(data.table) # el <- as.data.table(edge_list) # names(el) <- c(\"from\", \"to\") # # edge_list$from <- gemeente_2019$id[edge_list$row.id] # edge_list$to <- gemeente_2019$id[edge_list$col.id] # edge_list <- subset(edge_list, row.id < col.id) # edge_list <- edge_list[,c(\"from\", \"to\")] # # g <- igraph::graph_from_data_frame(edge_list, directed = FALSE) # plot(g) # library(igraph) # i <- match(names(V(g)), gemeente_2019$id) # # c2 <- igraph::layout_with_fr(g, coords[i,]) # plot(g, layout = c2) # # buurt_2019 <- st_read(\"https://cartomap.github.io/nl/rd/buurt_2019.geojson\") # st_crs(buurt_2019) <- 28992 # system.time({ #   nbl <- st_touches(buurt_2019) # }) # # coords <- st_coordinates(st_centroid(buurt_2019)) # l <- lapply(seq_along(nbl), function(i){ #   nb <- nbl[[i]] #   st_sfc(lapply(nb, function(j){ #     st_linestring(coords[c(i,j),])}) #   ) # }) # l2 <- do.call(c, l) # # plot(l2)"},{"path":"/reference/protect_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect a sdc_raster by smoothing — protect_smooth","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"protect_smooth reduces sensitivity applying Gaussian smoother, making values less localized.","code":""},{"path":"/reference/protect_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"","code":"protect_smooth(x, bw = raster::res(x$value), ...)"},{"path":"/reference/protect_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"x raster object bw bandwidth ... passed focal.","code":""},{"path":"/reference/protect_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"sensitivity raster can decreased applying kernel density smoother argued de Jonge et al. (2016) de Wolf et al. (2018). Smoothing spatially spreads localized values, reducing risk location disclosure. Note smoothing often visually enhances detection spatial patterns. kernel applied Gaussian kernel bandwidth bw supplied user. smoother acts upon x$value$count x$value$sum new x$value$mean derived.","code":""},{"path":"/reference/protect_smooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"de Jonge, E., & de Wolf, P. P. (2016, September). Spatial smoothing statistical disclosure control. International Conference Privacy Statistical Databases (pp. 107-117). Springer, Cham. de Wolf, P. P., & de Jonge, E. (2018, September). Safely Plotting Continuous Variables Map. International Conference Privacy Statistical Databases (pp. 347-359). Springer, Cham.","code":""},{"path":[]},{"path":"/reference/protect_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect a sdc_raster by smoothing — protect_smooth","text":"","code":"# \\donttest{ library(sdcSpatial) library(raster)  data(enterprises)  # create a sdc_raster from point data with raster with # a resolution of 200m production <- sdc_raster(enterprises, variable = \"production\"                         , r = 200, min_count = 3)  print(production) #> numeric sdc_raster object:  #>    resolution: 200 200 ,  max_risk: 0.95 , min_count: 3  #>    mean sensitivity score [0,1]:  0.6328234  # plot the raster zlim <- c(0, 3e4) # show which raster cells are sensitive plot(production, zlim=zlim)   # but we can also retrieve directly the raster sensitive <- is_sensitive(production, min_count = 3) plot(sensitive, col = c('white', 'red'))   # what is the sensitivy fraction? sensitivity_score(production) #> [1] 0.6328234 # or equally cellStats(sensitive, mean) #> [1] 0.6328234  # let's smooth to reduce the sensitivity smoothed <- protect_smooth(production, bw = 400) plot(smoothed)   # let's smooth to reduce the sensitivity, with higher resolution smoothed <- protect_smooth(production, bw = 400, fact=4, keep_resolution=FALSE) plot(smoothed)   # what is the sensitivy fraction? sensitivity_score(smoothed) #> [1] 0.007962441  # let's remove the sensitive data. smoothed_safe <- remove_sensitive(smoothed, min_count = 3) plot(smoothed_safe)   # let's communicate! production_mean <- mean(smoothed_safe) production_total <- sum(smoothed_safe)  # and create a contour plot raster::filledContour(production_mean, nlevels = 6, main = \"Mean production\")    # generated with R 3.6 >= #col <- hcl.colors(11, rev=TRUE) col <- c(\"#FDE333\", \"#C2DE34\", \"#7ED357\", \"#00C475\", \"#00B28A\", \"#009B95\"         ,  \"#008298\", \"#006791\", \"#274983\", \"#44286E\", \"#4B0055\"         ) raster::filledContour(production_total, nlevels = 11              , col = col              , main=\"Total production\")  # }"},{"path":"/reference/remove_sensitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove sensitive cells from raster — remove_sensitive","title":"Remove sensitive cells from raster — remove_sensitive","text":"remove_sensitive removes sensitive cells sdc_raster. sensitive cells, found is_sensitive() set NA.","code":""},{"path":"/reference/remove_sensitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove sensitive cells from raster — remove_sensitive","text":"","code":"remove_sensitive(x, max_risk = x$max_risk, min_count = x$min_count, ...)  mask_sensitive(x, max_risk = x$max_risk, min_count = x$min_count, ...)"},{"path":"/reference/remove_sensitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove sensitive cells from raster — remove_sensitive","text":"x sdc_raster object. max_risk risk value higher max_risk sensitive. min_count count lower min_count sensitive. ... passed is_sensitive.","code":""},{"path":"/reference/remove_sensitive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove sensitive cells from raster — remove_sensitive","text":"sdc_raster object sensitive cells set NA.","code":""},{"path":"/reference/remove_sensitive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove sensitive cells from raster — remove_sensitive","text":"Removing sensitive cells protection method, often useful finalize map protection protection methods applied. mask_sensitive remove_sensitive synonyms, accommodate experienced raster users well sdc users.","code":""},{"path":[]},{"path":"/reference/remove_sensitive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove sensitive cells from raster — remove_sensitive","text":"","code":"library(raster)  unemployed <- sdc_raster(dwellings[1:2], dwellings$unemployed, r=200)  # plot the normally rastered data plot(unemployed, zlim=c(0,1))  plot_sensitive(unemployed)   unemployed_safe <- remove_sensitive(unemployed, risk_type=\"discrete\") plot_sensitive(unemployed_safe, zlim=c(0,1))  print(unemployed) #> logical sdc_raster object:  #>    resolution: 200 200 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.4572576 unemployed$value #> class      : RasterStack  #> dimensions : 62, 61, 3782, 4  (nrow, ncol, ncell, nlayers) #> resolution : 200, 200  (x, y) #> extent     : 149400, 161600, 457800, 470200  (xmin, xmax, ymin, ymax) #> crs        : NA  #> names      : sum, count, mean, scale  #> min values :   0,     1,    0,     1  #> max values : 195,   329,    1,     1  #>"},{"path":"/reference/sdcSpatial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Privacy Protected maps — sdcSpatial-package","title":"Privacy Protected maps — sdcSpatial-package","text":"sdcSpatial contains  functions create spatial distribution maps, assess risk disclosure location suppress adjust revealing values certain locations.","code":""},{"path":"/reference/sdcSpatial-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Privacy Protected maps — sdcSpatial-package","text":"sdcSpatial working horse sdc_raster() object upon following methods can applied:","code":""},{"path":"/reference/sdcSpatial-package.html","id":"sensitivity-assessment","dir":"Reference","previous_headings":"","what":"Sensitivity assessment","title":"Privacy Protected maps — sdcSpatial-package","text":"plot.sdc_raster(), plot_sensitive() print is_sensitive()","code":""},{"path":"/reference/sdcSpatial-package.html","id":"protection-methods","dir":"Reference","previous_headings":"","what":"Protection methods","title":"Privacy Protected maps — sdcSpatial-package","text":"remove_sensitive() protect_smooth() protect_quadtree()","code":""},{"path":"/reference/sdcSpatial-package.html","id":"extraction","dir":"Reference","previous_headings":"","what":"Extraction","title":"Privacy Protected maps — sdcSpatial-package","text":"sum, extract sum layer sdc_raster object mean, extract mean layer sdc_raster object","code":""},{"path":"/reference/sdcSpatial-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Privacy Protected maps — sdcSpatial-package","text":"de Jonge, E., & de Wolf, P. P. (2016, September). Spatial smoothing statistical disclosure control. International Conference Privacy Statistical Databases (pp. 107-117). Springer, Cham. de Wolf, P. P., & de Jonge, E. (2018, September). Safely Plotting Continuous Variables Map. International Conference Privacy Statistical Databases (pp. 347-359). Springer, Cham. Suñé, E., Rovira, C., Ibáñez, D., Farré, M. (2017). Statistical disclosure control visualising geocoded population data using structure quadtrees, NTTS 2017","code":""},{"path":[]},{"path":"/reference/sdcSpatial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Privacy Protected maps — sdcSpatial-package","text":"Maintainer: Edwin de Jonge edwindjonge@gmail.com (ORCID) Authors: Peter-Paul de Wolf contributors: Douwe Hut [contributor] Sapphire Han [contributor]","code":""},{"path":"/reference/sdc_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster map with privacy awareness — sdc_raster","title":"Create a raster map with privacy awareness — sdc_raster","text":"sdc_raster creates multiple raster::raster objects (\"count\", \"mean\", \"sum\") supplied point data x calculates sensitivity privacy disclosure raster location.","code":""},{"path":"/reference/sdc_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster map with privacy awareness — sdc_raster","text":"","code":"sdc_raster(   x,   variable,   r = 200,   max_risk = 0.95,   min_count = 10,   risk_type = c(\"external\", \"internal\", \"discrete\"),   ...,   field = variable )"},{"path":"/reference/sdc_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster map with privacy awareness — sdc_raster","text":"x sp::SpatialPointsDataFrame, sf::sf two column matrix data.frame used create raster map. variable name data column numeric length x used data raster map. r either desired resolution pre-existing raster object. first case, crs x (present) used, latter properties r kept. max_risk numeric, maximum_risk score (disclosure_risk) cell map considered sensitive. min_count numeric, raster cell less min_count observations considered sensitived. risk_type passed disclosure_risk(). ... passed raster::rasterize() field synonym variable. supplied, field precedence.","code":""},{"path":"/reference/sdc_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster map with privacy awareness — sdc_raster","text":"object class \"sdc_raster\": $value: raster::brick() object different layers e.g. count, sum, mean, scale. $max_risk: see . $min_count: see . protection operation protect_smooth() protect_quadtree(). $type: data type variable, either numeric logical $risk_type, \"external\", \"internal\" \"discrete\" (see disclosure_risk())","code":""},{"path":"/reference/sdc_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a raster map with privacy awareness — sdc_raster","text":"sdc_raster object vehicle book keeping calculating sensitivity. Protection methods work upon sdc_raster return new sdc_raster sensitivity reduced. sensitivity map can assessed sensitivity_score, plot.sdc_raster(), plot_sensitive() print. Reducing sensitivity can done protect_smooth(), protect_quadtree() remove_sensitive(). Raster maps mean, sum count data can extracted $value (brick()).","code":""},{"path":[]},{"path":"/reference/sdc_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a raster map with privacy awareness — sdc_raster","text":"","code":"library(raster) prod <- sdc_raster(enterprises, field = \"production\", r = 500) print(prod) #> numeric sdc_raster object:  #>    resolution: 500 500 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.6432039  prod <- sdc_raster(enterprises, field = \"production\", r = 1e3) print(prod) #> numeric sdc_raster object:  #>    resolution: 1000 1000 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.255814  # get raster with the average production per cell averaged over the enterprises prod_mean <- mean(prod) summary(prod_mean) #>              layer #> Min.      383.4914 #> 1st Qu.  1425.1032 #> Median   2463.0075 #> 3rd Qu.  4150.8754 #> Max.    11871.0465 #> NA's        6.0000  # get raster with the total production per cell prod_total <- sum(prod) summary(prod_total) #>                 sum #> Min.       1115.291 #> 1st Qu.   14887.530 #> Median    58206.438 #> 3rd Qu.  178065.698 #> Max.    2435076.047 #> NA's          6.000"},{"path":"/reference/sensitivity_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean sensitivity for raster — sensitivity_score","title":"Mean sensitivity for raster — sensitivity_score","text":"sensitivity_score calculates fraction cells (value) considered sensitive according used disclosure_risk","code":""},{"path":"/reference/sensitivity_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean sensitivity for raster — sensitivity_score","text":"","code":"sensitivity_score(x, max_risk = x$max_risk, min_count = x$min_count, ...)"},{"path":"/reference/sensitivity_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean sensitivity for raster — sensitivity_score","text":"x sdc_raster object. max_risk risk value higher max_risk sensitive. min_count count lower min_count sensitive. ... passed is_sensitive","code":""},{"path":[]},{"path":"/reference/sensitivity_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean sensitivity for raster — sensitivity_score","text":"","code":"consumption <- sdc_raster(dwellings[1:2], variable = dwellings$consumption, r = 500)  sensitivity_score(consumption) #> [1] 0.4207188 # same as print(consumption) #> numeric sdc_raster object:  #>    resolution: 500 500 ,  max_risk: 0.95 , min_count: 10  #>    mean sensitivity score [0,1]:  0.4207188  # change the rules! A higher norm generates more sensitive cells sensitivity_score(consumption, min_count = 20) #> [1] 0.5116279"},{"path":"/reference/smooth_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create kde density version of a raster — smooth_raster","title":"Create kde density version of a raster — smooth_raster","text":"Create kde density version raster","code":""},{"path":"/reference/smooth_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create kde density version of a raster — smooth_raster","text":"","code":"smooth_raster(   x,   bw = raster::res(x),   smooth_fact = 5,   keep_resolution = TRUE,   na.rm = TRUE,   pad = TRUE,   padValue = NA,   threshold = NULL,   type = c(\"Gauss\", \"circle\", \"rectangle\"),   ... )"},{"path":"/reference/smooth_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create kde density version of a raster — smooth_raster","text":"x raster object bw bandwidth smooth_fact integer, disaggregate factor better smoothing keep_resolution integer, returned map resolution x keep disaggregated raster resulting smooth_fact? na.rm NA value removed raster? pad data padded? padValue padding value ? threshold cells lower (weighted) value threshold removed. type type smoothing (see raster::focal()) ... passed focal.","code":""},{"path":"/reference/topdown_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove revealing high and low values — topdown_code","title":"Remove revealing high and low values — topdown_code","text":"Remove revealing high low values","code":""},{"path":"/reference/topdown_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove revealing high and low values — topdown_code","text":"","code":"topdown_code(r, top = Inf, down = -Inf, ..., upper = top, lower = down)"},{"path":"/news/index.html","id":"version-050","dir":"Changelog","previous_headings":"","what":"version 0.5.0","title":"version 0.5.0","text":"Added protect_neighborhood function Fixed bug protect_smooth, now can return higher resolution version keep_resolution=FALSE. internal improvements $scale. added mask_grid, mask_random, mask_weighted_random mask_voronoi functions, perturbating points rasterization.","code":""},{"path":"/news/index.html","id":"sdcspatial-0209000","dir":"Changelog","previous_headings":"","what":"sdcSpatial 0.2.0.9000","title":"sdcSpatial 0.2.0.9000","text":"Added NEWS.md file track changes package. Added is_sensitive_at function calculate sensitivity original locations. Added protect_coarsen function aggregating raster. Added protect_neighborhood function alternative protection method Fixed bug protect_smooth: gaussian smooth accidentally uniform smooth.","code":""}]
